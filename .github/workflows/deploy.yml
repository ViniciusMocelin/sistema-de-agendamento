name: Deploy to AWS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python scripts/run-tests.py

      - name: Lint code
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Get EC2 IP
        id: get-ip
        run: |
          IP=$(aws ec2 describe-instances --instance-ids i-04d14b81170c26323 --region us-east-1 --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "ip=$IP" >> $GITHUB_OUTPUT
          echo "EC2 IP: $IP"

      - name: Wait for EC2 to be ready
        run: |
          echo "Waiting for EC2 to be ready..."
          sleep 60

      - name: Test EC2 connectivity
        run: |
          echo "Testing connectivity to ${{ steps.get-ip.outputs.ip }}"
          curl -f -s --max-time 30 "http://${{ steps.get-ip.outputs.ip }}/" || echo "Application may still be starting"

      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2..."
          ssh-keyscan -H ${{ steps.get-ip.outputs.ip }} >> ~/.ssh/known_hosts
          ssh -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no ubuntu@${{ steps.get-ip.outputs.ip }} << 'EOF'
            set -e
            echo "🚀 Starting deployment..."
            
            cd /home/django/sistema-agendamento
            
            # Backup current configuration
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Update dependencies
            echo "📦 Installing dependencies..."
            pip install -r requirements.txt
            
            # Run migrations
            echo "🗄️ Running migrations..."
            python manage.py migrate --settings=core.settings_production
            
            # Collect static files
            echo "📁 Collecting static files..."
            python manage.py collectstatic --noinput --settings=core.settings_production
            
            # Create superuser if needed
            echo "🔐 Ensuring superuser exists..."
            python manage.py create_4minds_superuser --force --no-input --settings=core.settings_production
            
            # Apply CSS fixes if available
            if [ -f static/css/style-fixed.css ]; then 
              cp static/css/style-fixed.css static/css/style.css
              echo "✅ CSS fixes applied"
            fi
            
            # Restart services
            echo "🔄 Restarting services..."
            sudo systemctl restart django
            sleep 5
            sudo systemctl restart nginx
            
            # Check service status
            echo "✅ Checking service status..."
            sudo systemctl status django --no-pager -l
            sudo systemctl status nginx --no-pager -l
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to be ready..."
            sleep 10
            
            # Test Django locally
            echo "🔍 Testing Django locally..."
            if curl -f -s http://localhost:8000/health/ > /dev/null; then
              echo "✅ Django is responding locally"
            else
              echo "❌ Django is not responding locally"
              echo "Trying to start Django manually..."
              sudo systemctl stop django
              sudo -u django bash -c "cd /home/django/sistema-agendamento && source venv/bin/activate && python manage.py runserver 0.0.0.0:8000 --settings=core.settings_production" &
              sleep 10
            fi
            
            # Test Nginx locally
            echo "🔍 Testing Nginx locally..."
            if curl -f -s http://localhost/ > /dev/null; then
              echo "✅ Nginx is responding"
            else
              echo "❌ Nginx is not responding"
              echo "Checking Nginx configuration..."
              sudo nginx -t
            fi
            
            echo "🎉 Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          sleep 30

          # Test main page
          curl -f -s "http://${{ steps.get-ip.outputs.ip }}/" && echo "✅ Main page working" || echo "⚠️ Main page may have issues"

          # Test admin page
          curl -f -s "http://${{ steps.get-ip.outputs.ip }}/admin/" && echo "✅ Admin page working" || echo "⚠️ Admin page may have issues"

          # Test static files
          curl -f -s "http://${{ steps.get-ip.outputs.ip }}/static/css/style.css" && echo "✅ Static files working" || echo "⚠️ Static files may have issues"

      - name: Update deployment info
        run: |
          echo "Updating deployment information..."

          # Create deployment info
          cat > deployment-info.json << EOF
          {
            "deployment_id": "${{ github.run_id }}",
            "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "commit_message": "${{ github.event.head_commit.message }}",
            "actor": "${{ github.actor }}",
            "ec2_ip": "${{ steps.get-ip.outputs.ip }}",
            "application_url": "http://${{ steps.get-ip.outputs.ip }}",
            "admin_url": "http://${{ steps.get-ip.outputs.ip }}/admin/",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "status": "deployed"
          }
          EOF

          # Commit deployment info (if possible)
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add deployment-info.json
          git commit -m "Update deployment info - ${{ github.run_id }}" || echo "No changes to commit"
          git push || echo "Could not push deployment info"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: http://${{ steps.get-ip.outputs.ip }}"
          echo "🔑 Admin URL: http://${{ steps.get-ip.outputs.ip }}/admin/"
          echo "📊 Dashboard URL: http://${{ steps.get-ip.outputs.ip }}/dashboard/"
          echo ""
          echo "🔐 Admin Credentials:"
          echo "   Username: @4minds"
          echo "   Password: @4mindsPassword"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs above for details."
