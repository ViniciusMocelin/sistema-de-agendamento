# Script para diagnosticar e corrigir erro 502 Bad Gateway
# Execute este script no PowerShell

Write-Host "üîß Diagnosticando erro 502 Bad Gateway..." -ForegroundColor Yellow

# Verificar se temos o IP da EC2
$EC2_IP = Read-Host "Digite o IP da inst√¢ncia EC2"

if (-not $EC2_IP) {
    Write-Host "‚ùå IP da EC2 √© obrigat√≥rio" -ForegroundColor Red
    exit 1
}

Write-Host "`nüîç Diagnosticando inst√¢ncia EC2: $EC2_IP" -ForegroundColor Cyan

# Testar conectividade b√°sica
Write-Host "`n1. Testando conectividade..." -ForegroundColor Cyan
try {
    $ping = Test-Connection -ComputerName $EC2_IP -Count 1 -Quiet
    if ($ping) {
        Write-Host "‚úÖ Inst√¢ncia EC2 est√° acess√≠vel" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Inst√¢ncia EC2 n√£o est√° acess√≠vel" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erro ao testar conectividade" -ForegroundColor Red
    exit 1
}

# Testar HTTP
Write-Host "`n2. Testando HTTP..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://$EC2_IP" -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ HTTP est√° respondendo (Status: $($response.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "‚ùå HTTP n√£o est√° respondendo: $($_.Exception.Message)" -ForegroundColor Red
}

# Testar health endpoint
Write-Host "`n3. Testando health endpoint..." -ForegroundColor Cyan
try {
    $healthResponse = Invoke-WebRequest -Uri "http://$EC2_IP/health/" -TimeoutSec 10 -ErrorAction Stop
    Write-Host "‚úÖ Health endpoint est√° respondendo" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Health endpoint n√£o est√° respondendo: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüîß Executando corre√ß√µes na inst√¢ncia EC2..." -ForegroundColor Yellow

# Gerar script de corre√ß√£o para executar na EC2
$fixScript = @'
#!/bin/bash
set -e

echo "üîß Iniciando corre√ß√£o do erro 502..."

# Verificar status dos servi√ßos
echo "üìä Verificando status dos servi√ßos..."
sudo systemctl status nginx --no-pager -l
sudo systemctl status django --no-pager -l

# Verificar se o Django est√° rodando na porta 8000
echo "üîç Verificando se Django est√° rodando na porta 8000..."
if netstat -tlnp | grep :8000; then
    echo "‚úÖ Django est√° rodando na porta 8000"
else
    echo "‚ùå Django n√£o est√° rodando na porta 8000"
fi

# Verificar logs do Nginx
echo "üìã Verificando logs do Nginx..."
sudo tail -20 /var/log/nginx/django_error.log

# Verificar logs do Django
echo "üìã Verificando logs do Django..."
sudo journalctl -u django --no-pager -l -n 20

# Verificar se o arquivo de configura√ß√£o do Nginx est√° correto
echo "üîç Verificando configura√ß√£o do Nginx..."
sudo nginx -t

# Verificar se o usu√°rio django existe e tem permiss√µes
echo "üë§ Verificando usu√°rio django..."
id django
ls -la /home/django/sistema-agendamento/

# Verificar se o ambiente virtual existe
echo "üêç Verificando ambiente virtual..."
if [ -d "/home/django/sistema-agendamento/venv" ]; then
    echo "‚úÖ Ambiente virtual existe"
    ls -la /home/django/sistema-agendamento/venv/bin/
else
    echo "‚ùå Ambiente virtual n√£o existe"
fi

# Verificar se o arquivo .env existe
echo "üìÑ Verificando arquivo .env..."
if [ -f "/home/django/sistema-agendamento/.env" ]; then
    echo "‚úÖ Arquivo .env existe"
    cat /home/django/sistema-agendamento/.env
else
    echo "‚ùå Arquivo .env n√£o existe"
fi

# Tentar reiniciar os servi√ßos
echo "üîÑ Reiniciando servi√ßos..."
sudo systemctl restart django
sleep 5
sudo systemctl restart nginx

# Verificar status ap√≥s reinicializa√ß√£o
echo "üìä Status ap√≥s reinicializa√ß√£o..."
sudo systemctl status django --no-pager -l
sudo systemctl status nginx --no-pager -l

# Verificar se Django est√° respondendo localmente
echo "üîç Testando Django localmente..."
if curl -f -s http://localhost:8000/health/ > /dev/null; then
    echo "‚úÖ Django est√° respondendo localmente"
else
    echo "‚ùå Django n√£o est√° respondendo localmente"
fi

# Verificar configura√ß√£o do Gunicorn
echo "üîç Verificando configura√ß√£o do Gunicorn..."
if [ -f "/home/django/sistema-agendamento/gunicorn.conf.py" ]; then
    echo "‚úÖ Arquivo gunicorn.conf.py existe"
    cat /home/django/sistema-agendamento/gunicorn.conf.py
else
    echo "‚ùå Arquivo gunicorn.conf.py n√£o existe"
fi

# Verificar se o banco de dados est√° acess√≠vel
echo "üóÑÔ∏è Verificando banco de dados..."
cd /home/django/sistema-agendamento
source venv/bin/activate
python manage.py check --settings=core.settings_production

echo "‚úÖ Diagn√≥stico conclu√≠do!"
'@

# Salvar script tempor√°rio
$fixScript | Out-File -FilePath "fix-502-temp.sh" -Encoding UTF8

Write-Host "`nüì§ Enviando script de corre√ß√£o para a EC2..." -ForegroundColor Cyan

# Executar script na EC2 (assumindo que voc√™ tem SSH configurado)
Write-Host "`n‚ö†Ô∏è  Para executar o script de corre√ß√£o, conecte-se √† EC2 e execute:" -ForegroundColor Yellow
Write-Host "ssh -i ~/.ssh/id_rsa ubuntu@$EC2_IP" -ForegroundColor White
Write-Host "`nDepois execute o script de corre√ß√£o que foi salvo em: fix-502-temp.sh" -ForegroundColor White

Write-Host "`nüìã COMANDOS R√ÅPIDOS PARA EXECUTAR NA EC2:" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Cyan
Write-Host "sudo systemctl status django" -ForegroundColor White
Write-Host "sudo systemctl status nginx" -ForegroundColor White
Write-Host "sudo journalctl -u django -f" -ForegroundColor White
Write-Host "sudo tail -f /var/log/nginx/django_error.log" -ForegroundColor White
Write-Host "sudo systemctl restart django" -ForegroundColor White
Write-Host "sudo systemctl restart nginx" -ForegroundColor White
Write-Host "curl http://localhost:8000/health/" -ForegroundColor White
Write-Host "=" * 50 -ForegroundColor Cyan

Write-Host "`nüîß SOLU√á√ïES MAIS COMUNS:" -ForegroundColor Yellow
Write-Host "1. Django n√£o est√° rodando: sudo systemctl restart django" -ForegroundColor White
Write-Host "2. Nginx n√£o est√° configurado: sudo nginx -t" -ForegroundColor White
Write-Host "3. Porta 8000 n√£o est√° aberta: netstat -tlnp | grep :8000" -ForegroundColor White
Write-Host "4. Permiss√µes incorretas: sudo chown -R django:django /home/django/" -ForegroundColor White
Write-Host "5. Banco de dados inacess√≠vel: verificar .env" -ForegroundColor White

# Limpar arquivo tempor√°rio
Remove-Item "fix-502-temp.sh" -Force -ErrorAction SilentlyContinue

Write-Host "`n‚úÖ Script de diagn√≥stico conclu√≠do!" -ForegroundColor Green
