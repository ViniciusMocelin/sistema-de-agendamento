#!/bin/bash

# Script para corrigir superuser em produ√ß√£o
# Sistema de Agendamento - 4Minds

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
REGION="us-east-1"
EC2_INSTANCE_ID="i-04d14b81170c26323"

echo -e "${BLUE}=== CORRE√á√ÉO DE SUPERUSER EM PRODU√á√ÉO ===${NC}"
echo -e "${BLUE}Sistema de Agendamento - 4Minds${NC}"
echo ""

# Fun√ß√£o para verificar pr√©-requisitos
check_prerequisites() {
    echo -e "${YELLOW}Verificando pr√©-requisitos...${NC}"
    
    # Verificar AWS CLI
    if ! command -v aws &> /dev/null; then
        echo -e "${RED}‚ùå AWS CLI n√£o encontrado${NC}"
        exit 1
    fi
    
    # Verificar se est√° configurado
    if ! aws sts get-caller-identity &> /dev/null; then
        echo -e "${RED}‚ùå AWS CLI n√£o configurado${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©-requisitos verificados${NC}"
}

# Fun√ß√£o para verificar status da infraestrutura
check_infrastructure() {
    echo -e "${YELLOW}Verificando infraestrutura...${NC}"
    
    # Verificar status da EC2
    EC2_STATUS=$(aws ec2 describe-instances \
        --instance-ids $EC2_INSTANCE_ID \
        --region $REGION \
        --query 'Reservations[0].Instances[0].State.Name' \
        --output text)
    
    echo -e "${BLUE}Status da EC2: ${EC2_STATUS}${NC}"
    
    if [[ "$EC2_STATUS" != "running" ]]; then
        echo -e "${RED}‚ùå Inst√¢ncia EC2 n√£o est√° rodando${NC}"
        echo -e "${YELLOW}Execute: ./scripts/start-aws-services-simple.bat${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Infraestrutura verificada${NC}"
}

# Fun√ß√£o para obter IP da EC2
get_ec2_ip() {
    EC2_IP=$(aws ec2 describe-instances \
        --instance-ids $EC2_INSTANCE_ID \
        --region $REGION \
        --query 'Reservations[0].Instances[0].PublicIpAddress' \
        --output text)
    
    if [[ "$EC2_IP" == "None" || -z "$EC2_IP" ]]; then
        echo -e "${RED}‚ùå N√£o foi poss√≠vel obter IP da EC2${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ IP da EC2: ${EC2_IP}${NC}"
}

# Fun√ß√£o para verificar usu√°rio via SSH
check_user_via_ssh() {
    echo -e "${YELLOW}Verificando usu√°rio na EC2...${NC}"
    
    # Executar comando na EC2
    ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$EC2_IP << EOF
        set -e
        
        echo "üîç Verificando usu√°rio @4minds..."
        
        # Ir para diret√≥rio da aplica√ß√£o
        cd /home/django/sistema-agendamento
        
        # Ativar ambiente virtual
        source venv/bin/activate
        
        # Verificar se usu√°rio existe
        echo "üìù Verificando usu√°rio no banco..."
        python manage.py shell << 'PYTHON_EOF'
from django.contrib.auth import get_user_model
User = get_user_model()

username = "@4minds"
if User.objects.filter(username=username).exists():
    user = User.objects.get(username=username)
    print(f"‚úÖ Usu√°rio '{username}' encontrado!")
    print(f"üìß Email: {user.email}")
    print(f"üîë √â superuser: {user.is_superuser}")
    print(f"üë®‚Äçüíº √â staff: {user.is_staff}")
    print(f"‚úÖ Est√° ativo: {user.is_active}")
    print(f"üìÖ Data de cria√ß√£o: {user.date_joined}")
    print(f"üìÖ √öltimo login: {user.last_login}")
    
    # Testar senha
    test_password = "@4mindsPassword"
    if user.check_password(test_password):
        print("‚úÖ Senha est√° correta!")
    else:
        print("‚ùå Senha est√° incorreta!")
        print("üí° Redefinindo senha...")
        user.set_password(test_password)
        user.save()
        print("‚úÖ Senha redefinida com sucesso!")
else:
    print(f"‚ùå Usu√°rio '{username}' n√£o encontrado!")
    print("üí° Criando usu√°rio...")
    user = User.objects.create_superuser(
        username=username,
        email="admin@4minds.com",
        password="@4mindsPassword"
    )
    print(f"‚úÖ Usu√°rio '{username}' criado com sucesso!")

# Listar todos os usu√°rios
print("\nüë• Todos os usu√°rios do sistema:")
users = User.objects.all()
for user in users:
    print(f"üë§ {user.username} (superuser: {user.is_superuser}, staff: {user.is_staff}, ativo: {user.is_active})")
PYTHON_EOF
        
        echo "‚úÖ Verifica√ß√£o conclu√≠da!"
EOF
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Verifica√ß√£o executada com sucesso na EC2${NC}"
    else
        echo -e "${RED}‚ùå Erro durante verifica√ß√£o${NC}"
        exit 1
    fi
}

# Fun√ß√£o para testar login via curl
test_login() {
    echo -e "${YELLOW}Testando login via HTTP...${NC}"
    
    # Fazer uma requisi√ß√£o para a p√°gina de admin
    if curl -f -s "http://$EC2_IP/admin/" > /dev/null; then
        echo -e "${GREEN}‚úÖ Admin est√° acess√≠vel${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Admin pode n√£o estar acess√≠vel${NC}"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes finais
show_final_info() {
    echo ""
    echo -e "${GREEN}=== VERIFICA√á√ÉO CONCLU√çDA ===${NC}"
    echo ""
    echo -e "${BLUE}üë§ Credenciais do Superuser:${NC}"
    echo -e "${YELLOW}Usu√°rio:${NC} @4minds"
    echo -e "${YELLOW}Senha:${NC} @4mindsPassword"
    echo -e "${YELLOW}Email:${NC} admin@4minds.com"
    echo ""
    echo -e "${BLUE}üåê URLs de Acesso:${NC}"
    echo -e "${YELLOW}Admin Django:${NC} http://$EC2_IP/admin/"
    echo -e "${YELLOW}Dashboard:${NC} http://$EC2_IP/dashboard/"
    echo ""
    echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo "1. Acesse http://$EC2_IP/admin/"
    echo "2. Fa√ßa login com as credenciais acima"
    echo "3. Se ainda n√£o funcionar, verifique os logs"
    echo ""
    echo -e "${BLUE}üîß Comandos √∫teis:${NC}"
    echo -e "${YELLOW}SSH:${NC} ssh -i ~/.ssh/id_rsa ubuntu@$EC2_IP"
    echo -e "${YELLOW}Logs:${NC} ssh -i ~/.ssh/id_rsa ubuntu@$EC2_IP 'sudo journalctl -u django -f'"
    echo ""
    echo -e "${GREEN}üéâ Verifica√ß√£o conclu√≠da!${NC}"
}

# Fun√ß√£o principal
main() {
    echo -e "${BLUE}Iniciando verifica√ß√£o e corre√ß√£o...${NC}"
    
    check_prerequisites
    check_infrastructure
    get_ec2_ip
    check_user_via_ssh
    test_login
    show_final_info
}

# Verificar se foi chamado com --help
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Script para Verificar e Corrigir Superuser em Produ√ß√£o"
    echo ""
    echo "Uso: $0"
    echo ""
    echo "Pr√©-requisitos:"
    echo "  - AWS CLI configurado"
    echo "  - Infraestrutura rodando"
    echo "  - Chave SSH configurada"
    echo ""
    echo "O script ir√°:"
    echo "  1. Verificar pr√©-requisitos"
    echo "  2. Verificar infraestrutura"
    echo "  3. Conectar na EC2"
    echo "  4. Verificar usu√°rio no banco"
    echo "  5. Corrigir senha se necess√°rio"
    echo "  6. Criar usu√°rio se n√£o existir"
    echo ""
    exit 0
fi

# Executar fun√ß√£o principal
main "$@"
