# Script PowerShell para iniciar servi√ßos AWS com atualiza√ß√£o autom√°tica de IP
# Sistema de Agendamento - 4Minds

param(
    [switch]$Help,
    [switch]$NoDeploy,
    [switch]$NoCommit
)

# Configura√ß√µes baseadas no terraform.tfstate
$REGION = "us-east-1"
$PROJECT_NAME = "sistema-agendamento"
$EC2_INSTANCE_ID = "i-04d14b81170c26323"
$RDS_INSTANCE_ID = "sistema-agendamento-postgres"

# Fun√ß√£o para mostrar ajuda
function Show-Help {
    Write-Host "=== SCRIPT PARA INICIAR SERVI√áOS AWS COM ATUALIZA√á√ÉO AUTOM√ÅTICA ===" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "Este script inicia todos os servi√ßos AWS que geram cobran√ßa E:"
    Write-Host "- Atualiza automaticamente o IP nos arquivos de configura√ß√£o"
    Write-Host "- Faz commit autom√°tico no GitHub"
    Write-Host "- Executa deploy autom√°tico (opcional)"
    Write-Host ""
    Write-Host "Uso:" -ForegroundColor Yellow
    Write-Host "  .\scripts\start-aws-services-auto.ps1"
    Write-Host "  .\scripts\start-aws-services-auto.ps1 -NoDeploy"
    Write-Host "  .\scripts\start-aws-services-auto.ps1 -NoCommit"
    Write-Host "  .\scripts\start-aws-services-auto.ps1 -Help"
    Write-Host ""
    Write-Host "Par√¢metros:" -ForegroundColor Yellow
    Write-Host "  -NoDeploy    N√£o executar deploy autom√°tico"
    Write-Host "  -NoCommit    N√£o fazer commit autom√°tico no GitHub"
    Write-Host "  -Help        Mostrar esta ajuda"
    Write-Host ""
    Write-Host "Pr√©-requisitos:" -ForegroundColor Yellow
    Write-Host "  - AWS CLI instalado e configurado"
    Write-Host "  - Git configurado com reposit√≥rio remoto"
    Write-Host "  - Python 3 instalado"
    Write-Host "  - Permiss√µes adequadas para EC2 e RDS"
    Write-Host ""
}

if ($Help) {
    Show-Help
    exit 0
}

# Cores para output
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

Write-ColorOutput "=== INICIANDO SERVI√áOS AWS COM ATUALIZA√á√ÉO AUTOM√ÅTICA ===" "Cyan"
Write-ColorOutput "Regi√£o: $REGION" "Blue"
Write-ColorOutput "Projeto: $PROJECT_NAME" "Blue"
Write-Host ""

# Fun√ß√£o para verificar se o AWS CLI est√° configurado
function Test-AWSCLI {
    try {
        $null = Get-Command aws -ErrorAction Stop
        Write-ColorOutput "‚úì AWS CLI encontrado" "Green"
        
        # Testar credenciais
        $null = aws sts get-caller-identity 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úì AWS CLI configurado corretamente" "Green"
            return $true
        } else {
            Write-ColorOutput "ERRO: AWS CLI n√£o est√° configurado ou credenciais inv√°lidas" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "ERRO: AWS CLI n√£o est√° instalado ou n√£o est√° no PATH" "Red"
        return $false
    }
}

# Fun√ß√£o para verificar Git
function Test-GitRepo {
    try {
        $null = git status 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úì Reposit√≥rio Git v√°lido" "Green"
            return $true
        } else {
            Write-ColorOutput "ERRO: N√£o √© um reposit√≥rio Git v√°lido" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "ERRO: Git n√£o est√° instalado ou n√£o est√° no PATH" "Red"
        return $false
    }
}

# Fun√ß√£o para verificar Python
function Test-Python {
    try {
        $null = Get-Command python -ErrorAction Stop
        Write-ColorOutput "‚úì Python encontrado" "Green"
        return $true
    } catch {
        try {
            $null = Get-Command python3 -ErrorAction Stop
            Write-ColorOutput "‚úì Python3 encontrado" "Green"
            return $true
        } catch {
            Write-ColorOutput "ERRO: Python n√£o est√° instalado ou n√£o est√° no PATH" "Red"
            return $false
        }
    }
}

# Fun√ß√£o para iniciar inst√¢ncia EC2
function Start-EC2Instance {
    Write-ColorOutput "Iniciando inst√¢ncia EC2..." "Yellow"
    
    try {
        # Verificar status atual
        $currentState = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].State.Name' --output text
        
        Write-ColorOutput "Status atual da inst√¢ncia EC2: $currentState" "Blue"
        
        if ($currentState -eq "stopped") {
            Write-ColorOutput "Iniciando inst√¢ncia EC2 ($EC2_INSTANCE_ID)..." "Yellow"
            aws ec2 start-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --output table
            
            Write-ColorOutput "Aguardando inst√¢ncia iniciar..." "Yellow"
            aws ec2 wait instance-running --instance-ids $EC2_INSTANCE_ID --region $REGION
            
            # Obter IP p√∫blico
            $publicIP = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].PublicIpAddress' --output text
            
            Write-ColorOutput "‚úì Inst√¢ncia EC2 iniciada com sucesso" "Green"
            Write-ColorOutput "‚úì IP P√∫blico: $publicIP" "Green"
            Write-ColorOutput "‚úì URL da aplica√ß√£o: http://$publicIP" "Green"
        } elseif ($currentState -eq "running") {
            Write-ColorOutput "‚úì Inst√¢ncia EC2 j√° est√° rodando" "Yellow"
            
            # Obter IP p√∫blico
            $publicIP = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].PublicIpAddress' --output text
            Write-ColorOutput "‚úì IP P√∫blico: $publicIP" "Green"
            Write-ColorOutput "‚úì URL da aplica√ß√£o: http://$publicIP" "Green"
        } elseif ($currentState -eq "pending") {
            Write-ColorOutput "‚úì Inst√¢ncia EC2 j√° est√° sendo iniciada" "Yellow"
            aws ec2 wait instance-running --instance-ids $EC2_INSTANCE_ID --region $REGION
            
            # Obter IP p√∫blico
            $publicIP = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].PublicIpAddress' --output text
            
            Write-ColorOutput "‚úì Inst√¢ncia EC2 iniciada com sucesso" "Green"
            Write-ColorOutput "‚úì IP P√∫blico: $publicIP" "Green"
            Write-ColorOutput "‚úì URL da aplica√ß√£o: http://$publicIP" "Green"
        } else {
            Write-ColorOutput "‚ö† Inst√¢ncia EC2 est√° em estado: $currentState" "Yellow"
        }
    } catch {
        Write-ColorOutput "ERRO ao gerenciar inst√¢ncia EC2: $($_.Exception.Message)" "Red"
    }
}

# Fun√ß√£o para iniciar inst√¢ncia RDS
function Start-RDSInstance {
    Write-ColorOutput "Iniciando inst√¢ncia RDS..." "Yellow"
    
    try {
        # Verificar status atual
        $currentState = aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --query 'DBInstances[0].DBInstanceStatus' --output text 2>$null
        
        if (-not $currentState) {
            $currentState = "not-found"
        }
        
        Write-ColorOutput "Status atual da inst√¢ncia RDS: $currentState" "Blue"
        
        if ($currentState -eq "stopped") {
            Write-ColorOutput "Iniciando inst√¢ncia RDS ($RDS_INSTANCE_ID)..." "Yellow"
            aws rds start-db-instance --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --output table
            
            Write-ColorOutput "Aguardando inst√¢ncia RDS iniciar..." "Yellow"
            aws rds wait db-instance-available --db-instance-identifier $RDS_INSTANCE_ID --region $REGION
            
            # Obter endpoint
            $rdsEndpoint = aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --query 'DBInstances[0].Endpoint.Address' --output text
            
            Write-ColorOutput "‚úì Inst√¢ncia RDS iniciada com sucesso" "Green"
            Write-ColorOutput "‚úì Endpoint: $rdsEndpoint" "Green"
        } elseif ($currentState -eq "available") {
            Write-ColorOutput "‚úì Inst√¢ncia RDS j√° est√° rodando" "Yellow"
            
            # Obter endpoint
            $rdsEndpoint = aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --query 'DBInstances[0].Endpoint.Address' --output text
            Write-ColorOutput "‚úì Endpoint: $rdsEndpoint" "Green"
        } elseif ($currentState -eq "starting") {
            Write-ColorOutput "‚úì Inst√¢ncia RDS j√° est√° sendo iniciada" "Yellow"
            aws rds wait db-instance-available --db-instance-identifier $RDS_INSTANCE_ID --region $REGION
            
            # Obter endpoint
            $rdsEndpoint = aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --query 'DBInstances[0].Endpoint.Address' --output text
            
            Write-ColorOutput "‚úì Inst√¢ncia RDS iniciada com sucesso" "Green"
            Write-ColorOutput "‚úì Endpoint: $rdsEndpoint" "Green"
        } elseif ($currentState -eq "not-found") {
            Write-ColorOutput "‚ö† Inst√¢ncia RDS n√£o encontrada" "Yellow"
        } else {
            Write-ColorOutput "‚ö† Inst√¢ncia RDS est√° em estado: $currentState" "Yellow"
        }
    } catch {
        Write-ColorOutput "ERRO ao gerenciar inst√¢ncia RDS: $($_.Exception.Message)" "Red"
    }
}

# Fun√ß√£o para executar atualiza√ß√£o autom√°tica de IP
function Invoke-AutoIPUpdate {
    Write-ColorOutput "ü§ñ Executando atualiza√ß√£o autom√°tica de IP..." "Cyan"
    
    try {
        # Verificar se script Python existe
        $scriptPath = "scripts\auto-ip-update.py"
        if (-not (Test-Path $scriptPath)) {
            Write-ColorOutput "‚ùå Script auto-ip-update.py n√£o encontrado" "Red"
            return $false
        }
        
        # Construir comando Python
        $pythonCmd = "python"
        if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
            $pythonCmd = "python3"
        }
        
        $cmd = "$pythonCmd `"$scriptPath`""
        if (-not $NoDeploy) {
            $cmd += " --deploy"
        }
        
        Write-ColorOutput "Executando: $cmd" "Blue"
        
        # Executar script Python
        Invoke-Expression $cmd
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Atualiza√ß√£o autom√°tica conclu√≠da com sucesso!" "Green"
            return $true
        } else {
            Write-ColorOutput "‚ùå Erro na atualiza√ß√£o autom√°tica" "Red"
            return $false
        }
    } catch {
        Write-ColorOutput "ERRO ao executar atualiza√ß√£o autom√°tica: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Fun√ß√£o para aguardar servi√ßos ficarem prontos
function Wait-ForServices {
    Write-ColorOutput "Aguardando servi√ßos ficarem prontos..." "Yellow"
    
    try {
        # Aguardar EC2
        $ec2State = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].State.Name' --output text
        
        if ($ec2State -eq "running") {
            Write-ColorOutput "Aguardando aplica√ß√£o Django iniciar..." "Yellow"
            Start-Sleep -Seconds 30
            
            # Obter IP p√∫blico
            $publicIP = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].PublicIpAddress' --output text
            
            # Testar se a aplica√ß√£o est√° respondendo
            Write-ColorOutput "Testando conectividade da aplica√ß√£o..." "Yellow"
            try {
                $response = Invoke-WebRequest -Uri "http://$publicIP" -TimeoutSec 10 -ErrorAction Stop
                Write-ColorOutput "‚úì Aplica√ß√£o Django est√° respondendo" "Green"
            } catch {
                Write-ColorOutput "‚ö† Aplica√ß√£o ainda n√£o est√° respondendo (pode levar alguns minutos)" "Yellow"
            }
        }
    } catch {
        Write-ColorOutput "Aviso: N√£o foi poss√≠vel testar conectividade" "Yellow"
    }
}

# Fun√ß√£o para mostrar status final
function Show-FinalStatus {
    Write-Host ""
    Write-ColorOutput "=== STATUS FINAL DOS SERVI√áOS ===" "Cyan"
    
    try {
        # Status EC2
        $ec2State = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].State.Name' --output text 2>$null
        
        $publicIP = aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --region $REGION --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>$null
        
        if (-not $publicIP -or $publicIP -eq "None") {
            $publicIP = "N/A"
        }
        
        Write-ColorOutput "EC2 ($EC2_INSTANCE_ID): $ec2State - IP: $publicIP" "Blue"
        
        # Status RDS
        $rdsState = aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --query 'DBInstances[0].DBInstanceStatus' --output text 2>$null
        
        $rdsEndpoint = aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --query 'DBInstances[0].Endpoint.Address' --output text 2>$null
        
        if (-not $rdsEndpoint -or $rdsEndpoint -eq "None") {
            $rdsEndpoint = "N/A"
        }
        
        Write-ColorOutput "RDS ($RDS_INSTANCE_ID): $rdsState - Endpoint: $rdsEndpoint" "Blue"
        
        Write-Host ""
        Write-ColorOutput "=== SERVI√áOS INICIADOS COM SUCESSO ===" "Green"
        
        if ($publicIP -ne "N/A") {
            Write-ColorOutput "URL da aplica√ß√£o: http://$publicIP" "Green"
            Write-ColorOutput "Comando SSH: ssh -i ~/.ssh/id_rsa ubuntu@$publicIP" "Green"
        }
        
        Write-ColorOutput "Nota: Aguarde alguns minutos para a aplica√ß√£o ficar completamente pronta" "Yellow"
    } catch {
        Write-ColorOutput "Aviso: N√£o foi poss√≠vel obter status final completo" "Yellow"
    }
}

# Fun√ß√£o principal
function Main {
    Write-ColorOutput "Iniciando processo de inicializa√ß√£o dos servi√ßos com automa√ß√£o..." "Blue"
    
    # Verificar pr√©-requisitos
    if (-not (Test-AWSCLI)) {
        Write-ColorOutput "ERRO: AWS CLI n√£o est√° configurado corretamente" "Red"
        exit 1
    }
    
    if (-not $NoCommit) {
        if (-not (Test-GitRepo)) {
            Write-ColorOutput "ERRO: Reposit√≥rio Git n√£o configurado" "Red"
            exit 1
        }
        
        if (-not (Test-Python)) {
            Write-ColorOutput "ERRO: Python n√£o est√° instalado" "Red"
            exit 1
        }
    }
    
    # Iniciar servi√ßos
    Start-RDSInstance
    Start-EC2Instance
    
    # Aguardar servi√ßos ficarem prontos
    Wait-ForServices
    
    # Executar atualiza√ß√£o autom√°tica (se n√£o desabilitado)
    if (-not $NoCommit) {
        Invoke-AutoIPUpdate
    }
    
    Show-FinalStatus
}

# Executar fun√ß√£o principal
Main
